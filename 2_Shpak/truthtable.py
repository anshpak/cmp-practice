# Упражнение: Для построения таблицы истинности какой-то логической функции, 
# содержащей n переменных, нужно сначала построить таблицу всех возможных значений этих переменных (True/False). 
# Напишите программу truthtable.py, которая для заданного n строит и выводит такую таблицу. Для простоты выводите не True/False, а 1/0.

import sys

n = int(sys.argv[1])

lst = reversed(range(2 ** n))
res = []

for el in lst:
	print(el)
	i = 0
	while (2 ** (i + 1) <= el):
		i = i + 1
	s = ''
	while(i >= 0):
		if el - 2 ** i >= 0:
			el = el - 2 ** i
			s += '1'
		else:
			s += '0'
		i = i - 1
	while len(s) < n:
		s += '0'
	print(s)
	tmp = []
	for ch in s:
		tmp += [int(ch)]
	res += [tmp]

for el in res:
	print(el)

# эту идею мне подсказал приятель, сам я не заметил, что это числа в двоичной системе счисления
# другая безумная идея мне пришла в голову - передвигать строки, то есть 
# 1111..0
# 111..01
# ...
# 011..11
# потом еще с одним ноликом
# 111..00
# 11..001
# ...
# 0011..1
# и так, до n-1-го нолика
# потом нужно еще попередвигать строки 1010101... и 0101010...
# и добавить в конце 11111... 00000..
# все строки длины n
# более того, можно упростить, этот подход, инвертируя некоторые строки